import { filter, pipe, pluck, propEq, reduce, uniq } from "ramda";
import Head from "next/head";
import React from "react";

import IndividualOrderModal from "../components/IndividualOrderModal";
import Input from "../components/Input";
import ResultsModal from "../components/ResultsModal";
import TableOrdersModal from "../components/TableOrdersModal";
import styles from "../styles/Home.module.css";

function makeId() {
  var result = "";
  var characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var charactersLength = characters.length;
  for (var i = 0; i < 5; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}

export default function Home() {
  const [subtotal, setSubtotal] = React.useState("");
  const [tax, setTax] = React.useState("");
  const [tip, setTip] = React.useState("");

  const [isTableOrdersModalOpen, setIsTableOrdersModalOpen] = React.useState(
    false
  );
  const [isIndividualOrderOpen, setIsIndividualOrderOpen] = React.useState(
    false
  );

  const [isResultsModalOpen, setIsResultsModalOpen] = React.useState(false);

  const [tableOrders, setTableOrders] = React.useState([]);
  const [individualOrders, setIndividualOrders] = React.useState([]);

  const [results, setResults] = React.useState([]);

  return (
    <>
      <Head>
        <title>Splitwise Helper</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.container}>

        <div>
          <div>
            <h3 style={{ textAlign: "center", margin: 0 }}>Subtotal</h3>
            <Input
              name="subTotalAmount"
              value={subtotal}
              onChange={(e) => {
                setSubtotal(e.target.value);
              }}
              style={{
                marginTop: 10,
                width: '100%'
              }}
              placeholder="Your Subtotal"
            />
            <h3 style={{ textAlign: "center", margin: "10px 0px 0px 0px" }}>
              Tax
            </h3>
            <Input
              name="taxAmount"
              value={tax}
              onChange={(e) => {
                setTax(e.target.value);
              }}
              style={{
                marginTop: 10,
                width: '100%'
              }}
              placeholder="Your Tax"
            />
            <h3 style={{ textAlign: "center", margin: "10px 0px 0px 0px" }}>
              Tip
            </h3>
            <Input
              style={{
                marginTop: 10,
                width: '100%'
              }}
              placeholder="Your Tip"
            />
          </div>

          <div style={{ display: "flex", alignItems: "center", marginTop: 10 }}>
            <h2 style={{ flex: 1 }}>Orders For The Table</h2>
            <button
              style={{ height: "fit-content" }}
              onClick={(e) => {
                e.preventDefault();
                setIsTableOrdersModalOpen(true);
              }}
            >
              Add
            </button>
          </div>
          <ul style={{ marginTop: 0 }}>
            {tableOrders.map(({ id, amount }) => (
              <li key={id}>${amount}</li>
            ))}
          </ul>
        </div>

        <div>
          <div style={{ display: "flex", alignItems: "center" }}>
            <h2 style={{ flex: 1 }}>Individual Orders</h2>
            <button
              style={{ height: "fit-content" }}
              onClick={(e) => {
                e.preventDefault();
                setIsIndividualOrderOpen(true);
              }}
            >
              Add
            </button>
          </div>
          <ul style={{ marginTop: 0 }}>
            {individualOrders.map(({ id, amount, person }) => (
              <li key={id}>
                ${amount} ({person})
              </li>
            ))}
          </ul>
        </div>

        <div
          style={{ display: "flex", justifyContent: "center", marginTop: 30 }}
        >
          <button
            onClick={(e) => {
              e.preventDefault();

              const multiplierPercentage =
                (100 * (parseFloat(tax) + parseFloat(tip))) /
                parseFloat(subtotal);
              const multiplier = 1 + multiplierPercentage / 100;
              const people = pipe(pluck("person"), uniq)(individualOrders);
              const totalSharedAmountPerPerson =
                tableOrders.reduce((acc, { amount }) => acc + amount, 0) /
                people.length;
              console.log({ totalSharedAmountPerPerson, multiplier, people });
              setResults(
                people.map((person) => {
                  const totalIndividualAmountForPerson = pipe(
                    filter(propEq("person", person)),
                    reduce((acc, { amount }) => acc + amount, 0)
                  )(individualOrders);

                  return {
                    id: makeId(),
                    person,
                    totalAmount:
                      (totalIndividualAmountForPerson +
                        totalSharedAmountPerPerson) *
                      multiplier,
                  };
                })
              );

              setIsResultsModalOpen(true);
            }}
          >
            Calculate
          </button>
        </div>
      </div>

      <TableOrdersModal
        isOpen={isTableOrdersModalOpen}
        onRequestClose={() => setIsTableOrdersModalOpen(false)}
        onSubmit={(tableOrderAmount) => {
          setTableOrders((prev) =>
            prev.concat({
              id: makeId(),
              amount: parseFloat(tableOrderAmount),
            })
          );
          setIsTableOrdersModalOpen(false);
        }}
      />

      <IndividualOrderModal
        isOpen={isIndividualOrderOpen}
        onRequestClose={() => setIsIndividualOrderOpen(false)}
        onSubmit={({ amount, person }) => {
          setIndividualOrders((prev) =>
            prev.concat({
              id: makeId(),
              amount: parseFloat(amount),
              person,
            })
          );
          setIsIndividualOrderOpen(false);
        }}
      />

      <ResultsModal
        isOpen={isResultsModalOpen}
        onRequestClose={() => setIsResultsModalOpen(false)}
        results={results}
      />
    </>
  );
}
